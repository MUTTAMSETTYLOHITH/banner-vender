# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: Int!
  userName: String!
  avatar: String!
  bio: String!
  phone: String!
  email: String!
}

type Post {
  id: Int!
  imageUrl: String!
  content: String!
  userId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type AuthOutPut {
  user: User!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: User
}

type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  totalItems: Int!
}

type PostInput {
  id: Float!
  content: String!
  imageUrl: String!
  user: User!
  createdAt: DateTime!
}

type PostsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [PostInput!]
  pagination: PaginationInfo
}

type PostResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: PostInput
}

type CommentOutput {
  id: Float!
  content: String!
  post: Post!
  user: User!
  createdAt: DateTime!
}

type CommentsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [CommentOutput!]
  pagination: PaginationInfo
}

type CommentResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CommentOutput
}

type Query {
  sayHello: String!
  getUserById(id: Float!): UserResponse!
  getUserByEmail(email: String!): UserResponse!
  getUserByUserName(userName: String!): UserResponse!
  getPostById(id: Int!): PostResponse!
  searchPosts(content: String, page: Int, limit: Int): PostsResponse!
  getUserPosts: PostsResponse!
  getCommentById(id: Int!): CommentResponse!
  getComment(postId: Int!, content: String!): CommentResponse!
  getCommentsForPost(postId: Int!, page: Int, limit: Int): CommentsResponse!
  getCountCommentPost(postId: Int!): Int!
  getCommentsByUserOnPost(postId: Int!): CommentsResponse!
  getCommentsByUser: CommentsResponse!
  getUserByComment(commentId: Int!): User!
  getPostByComment(commentId: Int!): Post!
}

type Mutation {
  register(fcmToken: String!, createUserDto: CreateUserDto!): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword(email: String!): String!
  resetPassword(resetPasswordDto: ResetPasswordDto!): String!
  changePassword(changePasswordDto: ChangePasswordDto!): String!
  adminLogin(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  managerLogin(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  logout: Boolean!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  createPost(content: String!, image: CreateImagDto!): PostResponse!
  updatePost(id: Int!, content: String!): PostResponse!
  deletePost(id: Int!): PostResponse!
  writeComment(postId: Int!, content: String!): CommentResponse!
  updateComment(commentId: Int!, content: String!): CommentResponse!
  deleteComment(commentId: Int!): CommentResponse!
}

input CreateUserDto {
  userName: String!
  email: String!
  password: String!
  phone: String!
}

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  userName: String
  avatar: CreateImagDto
  email: String
  phone: String
}

input CreateImagDto {
  name: String!
  breed: String!
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload